# -*- coding: utf-8 -*-
"""Curso Alura - Quarentena de Dados

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s6fe2KguROIpW8xcuwV3J-ylCzIPvS7o

# AULA 1:

INTRODUÇÂO
* Mostrando como o pyton funciona com a biblioteca pandas
* Importação de Arquivos 
*
"""

print("Henrique Lima")
nome_do_filme = "totoro, o filme"
print (nome_do_filme)

print(nome_do_filme)

import pandas as pd

# FILMES, GENEROS, ANO
filmes = pd.read_csv("https://raw.githubusercontent.com/alura-cursos/introducao-a-data-science/master/aula0/ml-latest-small/movies.csv")
filmes.columns = ["filmeId", "titulo", "genero"]
filmes.head()

# filmes é um 'DataFrame'.

# NOTAS
avaliacoes = pd.read_csv("https://raw.githubusercontent.com/alura-cursos/introducao-a-data-science/master/aula0/ml-latest-small/ratings.csv")
avaliacoes.head()

# QUANTIDADE DE AVALIACOES 
avaliacoes.shape

# LINHAS DE AVALIACOES
len(avaliacoes)

# SOBRESCREVENDO NOME DAS COLUNAS
avaliacoes.columns = ["usuarioId", "filmeId", "nota", "momento"]
avaliacoes.head()

# BUSCAR AVALIACOES PARA FILME ID1
avaliacoes.query("filmeId==1")

# NOTA MÁXIMA E NOTA MÍNIMA
avaliacoes.describe()

# MOSTRAR APENAS UMA COLUNA

avaliacoes["nota"]

# BUSCA POR MÉDIA DE FILME ID1
avaliacoes.query("filmeId==1").mean()

# BUSCA POR MÉDIA DE NOTA DADA PARA FILME ID1
avaliacoes.query("filmeId==1")["nota"].mean()

filmes = pd.read_csv("https://raw.githubusercontent.com/alura-cursos/introducao-a-data-science/master/aula0/ml-latest-small/movies.csv")
display (" ------ FILMES --------")
display(filmes.head())

notas = pd.read_csv("https://raw.githubusercontent.com/alura-cursos/introducao-a-data-science/master/aula0/ml-latest-small/ratings.csv")
notas.columns = ["usuarioId", "filmeId", "nota", "momento"]
display ( " ----------------- NOTAS ----------------")
display(notas.head())

display("Nota filme Id1:", notas.query("filmeId==1")["nota"].mean())
display("Nota filme Id2:", notas.query("filmeId==2")["nota"].mean())

notas_medias_por_filme = notas.groupby("filmeId")["nota"].mean()
notas_medias_por_filme.head()

filmes["nota_media"] = notas_medias_por_filme
filmes.head()

# JUNTANDO COLUNA FILME ID + NOTAS
filmes_com_media = filmes.join(notas_medias_por_filme, on="filmeId")
filmes_com_media.head()

# ORDENAR FILMES 
filmes_com_media.sort_values("nota", ascending = False)

# PLOTANDO GRÁFICOS DE AVALIAÇÕES ID1

notas.query("filmeId == 1")["nota"].plot(kind = "hist", title = "Avaliações do Filme Toy Story")

# PLOTANDO GRÁFICOS DE AVALIAÇÕES ID2

notas.query("filmeId == 2")["nota"].plot(kind = "hist", title = "Avaliações do Filme Jumanji")

# PLOTANDO GRÁFICOS DE AVALIAÇÕES ID1

notas.query("filmeId == 1")["nota"].plot(kind = "hist", title = "Avaliações do Filme Toy Story")

# Desafio 1 = encontrar os 18 filmes que não tiveram avaliação 
# Desafio 2 = mudar o nome da coluna 'nota' para média após o join
# Desafio 3 = colocar o número de avaliações que os melhores filmes receberam
# Desafio 4 = arrendondar valores de notas para duas casas decimais
# Desafio 5 = descobrir os gêneros únicos 
# Desafio 6 = contar o número de cada gênero (quantos têm de drama, comédia, aventura etc)
# Desafio 7 = plotar o gráfico de aparições por gênero. Pode ser um gráfico de tipo igual a barra

"""# AULA 2:"""

import pandas as pd
filmes = pd.read_csv("https://raw.githubusercontent.com/alura-cursos/introducao-a-data-science/master/aula0/ml-latest-small/movies.csv") #Dataframe Filmes
filmes.columns = ["filmeId", "titulo", "generos"] #Renomeando colunas do Dataframe Filmes

avaliacoes = pd.read_csv("https://github.com/alura-cursos/introducao-a-data-science/blob/master/aula0/ml-latest-small/ratings.csv?raw=true") #Dataframe Avaliacoes
avaliacoes.columns = ["usuarioId","filmeId","nota","momento"] #Renomeando colunas do Dataframe Avaliacoes

notas_medias_por_filme = avaliacoes.groupby("filmeId")["nota"].mean() 
total_votos_por_filme = avaliacoes.groupby("filmeId")["nota"].count() # counts the number of values in each column

filmes_com_medias = filmes.join(notas_medias_por_filme, on ="filmeId") #Juntando Dataframe filmes + media de cada filme
filmes_com_medias.columns = ["filmeId", "titulo", "generos", "nota_media"] # Renomeando coluna 'nota' para "nota_media"

filmes_com_medias_e_votos = filmes_com_medias.join(total_votos_por_filme, on="filmeId")
filmes_com_medias_e_votos.columns = ["filmeId", "titulo","generos", "nota_media", "total_votos"]
filmes_com_medias_e_votos['nota_media'] = filmes_com_medias_e_votos['nota_media'].round(2) # round a DataFrame to a variable number of decimal places.

total_filmes_por_genero = filmes_com_medias_e_votos.generos.str.get_dummies().sum() #Extrair a soma 




filmes["generos"].str.get_dummies("|") # get dumies separa os generos

filmes["generos"].str.get_dummies("|").sum()  # Somar a quantidade de filmes por gêneros

filmes["generos"].str.get_dummies("|").sum(axis=1) # Somar quantidade de generos por filme

filmes["generos"].str.get_dummies("|").sum(axis=1).value_counts()  # Somar quantidade de filmes por quantidade de gêneros

filmes["generos"].str.get_dummies("|").sum().sort_values(ascending = False) # Ordenação pela quantidade de filmes por gênero

filmes.index   # indice do dataframe filmes

filmes.values

filmes["generos"].str.get_dummies("|").sum().sort_values(ascending = False).index  # Índices Ordenados

filmes["generos"].str.get_dummies("|").sum().sort_index() # Índices ordenados em ordem alfabética

filmes["generos"].str.get_dummies("|").sum().sort_index(ascending = False)

filmes["generos"].str.get_dummies("|").sum().sort_values(ascending = False).plot() # Plotando um gráfico

filmes["generos"].str.get_dummies("|").sum().sort_values(ascending = False).plot(kind= "pie", title="Meu gráfico de pizza", figsize=[8,8])

# FILMES POR CATEGORIA #
filmes["generos"].str.get_dummies("|").sum().sort_values(ascending = False).plot(kind= "bar", title="Meu gráfico de pizza", figsize=[16,8])

import seaborn as sns
sns.set_style("whitegrid") # Inserindo Grid

filmes_por_genero = filmes["generos"].str.get_dummies("|").sum().sort_values(ascending = False)

grafico = sns.barplot(x= filmes_por_genero.index,
                      y= filmes_por_genero.values,
                      palette = sns.color_palette("BuGn_r", n_colors=len(filmes_por_genero) + 5))

# DESAFIO 1 - Rotacionar os thicks (nome dos gêneros) em 45º - passar argumentospara biblioteca sns.barplot

notas_do_filme_1 = notas.query("filmeId==1")["nota"]
print(notas_do_filme_1.mean())
notas_do_filme_1.plot(kind="hist", figsize=[8,6])  #PLOTANDO NOTAS DO FILME 1

notas_do_filme_2 = notas.query("filmeId==2")["nota"]
print(notas_do_filme_2.mean())
notas_do_filme_2.plot(kind="hist", figsize=[8,6])  #PLOTANDO NOTAS DO FILME 2

notas_do_filme_2.describe()

notas_do_filme_1.describe()

notas.groupby("filmeId").mean()

filmes_com_medias.sort_values("nota_media", ascending = False)[2450:2500]



def plot_filme(n):
  notas_do_filme = avaliacoes.query(f"filmeId=={n}")["nota"]
  notas_do_filme.plot(kind="hist")  
  return notas_do_filme.describe()

plot_filme(919)

plot_filme(46578) #Plotando gráfico describe do filme com Id 46578 utilizado na função plot_filme(n)

#Desafio2 : Comparar outros filmes com notas próximas com distribuições diferentes

def plot_filme(n):
  notas_do_filme = avaliacoes.query(f"filmeId=={n}")["nota"]
  notas_do_filme.plot(kind="hist")  
  plt.show()
  notas_do_filme.plot.box()
  plt.show()
  return notas_do_filme.describe()

plot_filme(919)

"""# AULA 3:
Nova Base  - Imdb
"""

import pandas as pd

imdb = pd.read_csv("https://gist.githubusercontent.com/guilhermesilveira/24e271e68afe8fd257911217b88b2e07/raw/e70287fb1dcaad4215c3f3c9deda644058a616bc/movie_metadata.csv")
imdb.head()

imdb["color"].unique()  # cores dos filmes da series "colour"

imdb["color"].value_counts()  # quantidade de cada cor

imdb["color"].value_counts(normalize=True) # quantidade de filmes preenchidos em cada por por porcentagem

imdb["director_name"].value_counts() # Quantosfilmes cada diretor fez.

imdb["director_name"]  #Cada diretor

imdb["director_name"].value_counts().tail(40)

imdb["num_critic_for_reviews"]

imdb["num_critic_for_reviews"].describe()

imdb["num_critic_for_reviews"].plot(kind="hist")  #plotando histograma

imdb["gross"].hist()

import seaborn as sns

sns.distplot(imdb["gross"])

imdb.sort_values("gross",ascending=False).head()

imdb.sort_values("gross",ascending=False).sample(5)  #Coletando filmes aleatórios para análise

# Perguntas Gerais
 - aventura tem nota melhor que comédia?
  - diretor com mais filmes tem nota melhor? tem mais faturamento?
  - as respostas são especificas para amostra ou para o mundo?
- quais correlações existem entre os dados
- budget x gross (orçamento x faturamento)
- title_yearcom algo?

color_or_bw = imdb.query("color in ['Color', ' Black and White']")
len (color_or_bw)

color_or_bw = imdb.query("color in ['Color', ' Black and White']")
color_or_bw["color_0_ou_1"] = (color_or_bw["color"]=="Color") * 1
color_or_bw["color_0_ou_1"].value_counts()
color_or_bw.head()

color_or_bw["color_0_ou_1"].value_counts()  #Filmes Coloridos x Filmes Preto e Branco

sns.scatterplot(data=color_or_bw, x="color_0_ou_1", y="gross")

color_or_bw.groupby("color").mean()  # média de faturamento do colorido é maior que o do preto e branco

color_or_bw.groupby("color").mean()["imdb_score"] # média de avaliações pw x colorido

color_or_bw.groupby("color").median()["imdb_score"] # mediana de avaliações pw x colorido

"""# Desafio 1 = Bloxplot da média do colorido e do preto e branco"""

budget_gross = imdb[["budget", "gross"]].dropna().query("budget > 0 | gross > 0") #dropna = remove valores faltantantes 

sns.scatterplot( x= "budget", y="gross", data= budget_gross)  # quantidade de gasto x faturamento de um filme

imdb.sort_values("budget", ascending=False)

imdb["country"].unique()

imdb_usa = imdb.query("country == 'USA'")
imdb_usa.sort_values("budget", ascending=False).head()